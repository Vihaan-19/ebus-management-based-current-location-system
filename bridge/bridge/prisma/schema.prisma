// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String            @id @default(uuid()) // Unique user ID
    email          String            @unique
    name           String?
    role           Role              @default(CREATOR) // CREATOR or EDITOR
    workspaces     WorkspaceMember[]
    createdAt      DateTime          @default(now())
    updatedAt      DateTime          @updatedAt
    Workspace      Workspace?
    Video          Video[]
    YouTubeAccount YouTubeAccount?
}

model Workspace {
    id               String            @id @default(uuid()) // Unique workspace ID
    name             String
    creator          User              @relation(fields: [creatorId], references: [id])
    creatorId        String            @unique // Ensures a user owns only one workspace
    members          WorkspaceMember[]
    videos           Video[]
    youtubeAccount   YouTubeAccount?   @relation(fields: [youtubeAccountId], references: [id])
    youtubeAccountId String?
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
}

model WorkspaceMember {
    id          String        @id @default(uuid())
    user        User          @relation(fields: [userId], references: [id])
    userId      String
    workspace   Workspace     @relation(fields: [workspaceId], references: [id])
    workspaceId String
    role        WorkspaceRole @default(EDITOR) // CREATOR or EDITOR
    createdAt   DateTime      @default(now())

    @@unique([userId, workspaceId]) // Ensures a user cannot join the same workspace twice
}

model Video {
    id           String      @id @default(uuid())
    workspace    Workspace   @relation(fields: [workspaceId], references: [id])
    workspaceId  String
    uploadedBy   User        @relation(fields: [uploadedById], references: [id])
    uploadedById String
    version      Int         @default(1) // Track video versions
    status       VideoStatus @default(PENDING) // Pending, Approved, Rejected
    fileUrl      String // S3 or Cloudflare R2 URL
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
}

model YouTubeAccount {
    id           String      @id @default(uuid())
    creator      User        @relation(fields: [creatorId], references: [id])
    creatorId    String      @unique // Only one YouTube account per creator
    accessToken  String // OAuth token for YouTube API
    refreshToken String
    channelId    String // YouTube Channel ID
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    Workspace    Workspace[]
}

enum Role {
    CREATOR
    EDITOR
}

enum WorkspaceRole {
    CREATOR
    EDITOR
}

enum VideoStatus {
    PENDING
    APPROVED
    REJECTED
}
